{"version":3,"sources":["../src/helper.ts","../src/core.ts"],"names":["flattenObject","obj","parentKey","acc","key","value","currentKey","__spreadValues","set","isPlainObject","SuperAPiBuilder","http","apiConfig","methods","_","path","method","name","apiMap","pathname","api","hasMethod","query","_a","that","reg","pathStr","queryStr","urlPath","urlQuery","str","data","index","match","mappingKey","fieldStr","defaultValue","fieldArr","field","dataTemp","item","message","apiPath","params","options","_data","url","sendParams","__spreadProps"],"mappings":"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","sourcesContent":["/**\r\n * 将对象扁平化\r\n * @param {Object} obj 需要扁平化的对象\r\n * @param {String|null} parentKey 父级key\r\n * @returns {Object} 返回扁平化后的对象\r\n */\r\nexport function flattenObject(\r\n  obj: { [key: string]: any },\r\n  parentKey?: string\r\n): { [key: string]: any } {\r\n  return Object.entries(obj).reduce((acc, [key, value]) => {\r\n    const currentKey = parentKey ? `${parentKey}.${key}` : key;\r\n    return {\r\n      ...acc,\r\n      ...(typeof value === \"object\" && value !== null\r\n        ? flattenObject(value, currentKey)\r\n        : { [currentKey]: value }),\r\n    };\r\n  }, {});\r\n}\r\n","import {\r\n  HttpClient,\r\n  ApiConfig,\r\n  ApiQuery,\r\n  ApiPath,\r\n  ApiParams,\r\n  Method,\r\n} from \"./type\";\r\nimport { flattenObject } from \"./helper\";\r\nimport { set, isPlainObject } from \"lodash-es\";\r\n\r\nexport class SuperAPiBuilder {\r\n  private apiConfig: ApiConfig = {};\r\n  private apiMap: Record<string, string> = {};\r\n  private http: HttpClient | null = null;\r\n  private methods: Method[] = [\r\n    \"get\",\r\n    \"post\",\r\n    \"put\",\r\n    \"delete\",\r\n    \"patch\",\r\n    \"head\",\r\n    \"options\",\r\n    \"trace\",\r\n    \"connect\",\r\n  ];\r\n  api: any = {};\r\n  constructor(http: HttpClient, apiConfig: ApiConfig) {\r\n    this.setApiConfig(apiConfig);\r\n    this.setHttp(http);\r\n  }\r\n  setMethod(methods: string[]) {\r\n    if (!methods.length) return;\r\n    this.methods.push(...methods);\r\n\r\n    Object.entries(this.apiMap)\r\n      .filter(([_, path]) => methods.some((method) => path.startsWith(method)))\r\n      .forEach(([name, path]) => this.setApi(name, path));\r\n  }\r\n  setHttp(http: HttpClient) {\r\n    this.http = http;\r\n  }\r\n  setApiConfig(apiConfig: ApiConfig) {\r\n    this.apiConfig = apiConfig;\r\n    const apiMap = flattenObject(apiConfig);\r\n    Object.entries(apiMap).forEach(([name, path]) => this.setApi(name, path));\r\n  }\r\n  setApi(pathname: string, api: string) {\r\n    set(this.apiConfig, pathname, api);\r\n    const hasMethod = this.methods.some((method) => api.startsWith(method));\r\n    this.apiMap[pathname] = (hasMethod ? \"\" : \"get \") + api;\r\n    this.generateApi(pathname);\r\n  }\r\n  getApi(pathname: string) {\r\n    return this.api[pathname];\r\n  }\r\n  getUrl(pathname: string, query?: ApiQuery, path?: ApiPath): string {\r\n    const apiConfig = this.apiMap[pathname];\r\n    if (!apiConfig) {\r\n      throw new Error(`api ${pathname} is not exist`);\r\n    }\r\n    const that = this;\r\n    const reg = /:(\\w+\\|?\\w+(=\\w+)?)|(\\{\\w+\\|?\\w+(=\\w+)?\\})/g;\r\n    const [pathStr, queryStr] = apiConfig.split(\" \").at(1)?.split(\"?\") || [];\r\n    const [urlPath, urlQuery] = [\r\n      { str: pathStr, data: path },\r\n      { str: queryStr, data: query },\r\n    ].map(({ str, data }, index) => {\r\n      return str?.replace(reg, (match: string): string => {\r\n        const mappingKey = match.toString().replace(/[:{}]/g, \"\");\r\n        const [fieldStr, defaultValue = \"\"] = mappingKey.split(\"=\");\r\n        const fieldArr = fieldStr.split(\"|\");\r\n        if (!fieldArr.length) return \"\";\r\n        return fieldArr.reduce((acc, field) => {\r\n          // 路径参数校验\r\n          if (\r\n            (!data || data[field] === undefined) &&\r\n            index === 0 &&\r\n            !defaultValue\r\n          ) {\r\n            that.throwError(`路径参数 ${field} 缺失,URL=${str}`);\r\n          }\r\n          if (data && data[field] !== undefined) {\r\n            acc = data[field]?.toString() || defaultValue || \"\";\r\n          }\r\n          return acc;\r\n        }, defaultValue);\r\n      });\r\n    });\r\n    return encodeURI(urlPath + (urlQuery ? `?${urlQuery}` : \"\"));\r\n  }\r\n  getData(pathname: string, data?: Record<string, any>) {\r\n    if (!data) return null;\r\n    if (!isPlainObject(data)) return isPlainObject || null;\r\n    const apiConfig = this.apiMap[pathname];\r\n    const dataTemp = apiConfig.split(\" \").at(2);\r\n    const dataSet =\r\n      dataTemp\r\n        ?.replace(/^\\{|\\}$/, \"\")\r\n        ?.split(\",\")\r\n        .map((item) => {\r\n          const [field, defaultValue = \"\"] = item.split(\"=\");\r\n          return { field, defaultValue };\r\n        }) || [];\r\n    return dataSet.reduce(\r\n      (acc: Record<string, any>, { field, defaultValue }) => {\r\n        acc[field] = defaultValue;\r\n        if (data[field] !== undefined) {\r\n          acc[field] = data[field];\r\n        }\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n  }\r\n  private throwError(message: string) {\r\n    throw new Error(message);\r\n  }\r\n  private generateApi(pathname: string) {\r\n    const apiPath = this.apiMap[pathname];\r\n    const [method, _, dataTemp] = apiPath.split(\" \");\r\n    const that = this;\r\n    set(\r\n      this.api,\r\n      pathname,\r\n      (params: ApiParams, options?: Record<string, any>) => {\r\n        const { query, path, data: _data } = params || {};\r\n        const url = that.getUrl(pathname, query, path);\r\n        const data = that.getData(dataTemp, _data);\r\n        const sendParams = {\r\n          ...(options || {}),\r\n          url,\r\n          method,\r\n          data,\r\n        };\r\n        return that.http?.request(sendParams);\r\n      }\r\n    );\r\n  }\r\n}"]}